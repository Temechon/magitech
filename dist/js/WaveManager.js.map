{"version":3,"sources":["../../js/WaveManager.js"],"names":[],"mappings":"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","file":"WaveManager.js","sourcesContent":["class WaveManager {\r\n\r\n    constructor(game) {\r\n        this.game = game;\r\n\r\n        // Enemies sent on the battlefield but not dead yet for the current wave\r\n        this.enemiesSent = [];\r\n\r\n        // Enemies that should be sent for the current wave\r\n        // This array is composed of objects {enemy, line}\r\n        this.enemiesToSend = [];\r\n\r\n        // Enemies sent for the current wave\r\n        // This array is indexed by lines\r\n        this.enemiesSent = [];\r\n\r\n        this.ENEMIES_X_POSITION = 10;\r\n    }\r\n\r\n    /**\r\n     * Send the next wave\r\n     */\r\n    sendWave() {\r\n\r\n        // Create X enemies\r\n        let nb = 10;\r\n        for (let e=0; e<nb; e++) {\r\n            let enemy = new Enemy(this.game);\r\n            let line = this.game.getRandomLine();\r\n\r\n            // update enemy position\r\n            enemy.position.z = line.cells[0].position.z;\r\n            enemy.position.x = this.ENEMIES_X_POSITION;\r\n\r\n            // Save enemy\r\n            this.enemiesToSend.push({enemy:enemy, line:line});\r\n        }\r\n\r\n        let count = 0;\r\n        let t = new Timer(1500, this.game.scene, {repeat:nb, autodestroy:true});\r\n        t.callback = () => {\r\n            let obj = this.enemiesToSend[count++];\r\n            let enemy = obj.enemy;\r\n            let line = obj.line;\r\n            enemy.isWalking = true;\r\n            // set line as hot\r\n            line.isHot = true;\r\n\r\n            // Save the enemy that has been sent\r\n            this.enemiesSent.push(obj);\r\n\r\n            // Update gui\r\n            this.game.gui.updateWavePointer(this.getWavePercentage());\r\n        };\r\n        t.onFinish = () => {\r\n            // Remove all enemies to send, cause all enemies have been sent :)\r\n            this.enemiesToSend.length = 0;\r\n        };\r\n        t.start();\r\n    }\r\n\r\n    /**\r\n     * The given enemy has been destroyed: delete it from the wave manager.\r\n     * If a line has no more enemy walking, deactivate the line\r\n     */\r\n    removeEnemy(enemy) {\r\n        for (let i=0; i<this.enemiesSent.length; i++) {\r\n            let obj = this.enemiesSent[i];\r\n            if (obj.enemy === enemy) {\r\n                this.enemiesSent.splice(i, 1);\r\n\r\n                if (this.getNumberOfEnemiesOnLine(obj.line) == 0) {\r\n                    // Deactivate tower on this line\r\n                    obj.line.isHot = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the number of enemies walking along a given line.\r\n     */\r\n    getNumberOfEnemiesOnLine(line) {\r\n        let sum = 0;\r\n        for (let obj of this.enemiesSent) {\r\n            if (obj.line === line){\r\n                sum++;\r\n            }\r\n        }\r\n\r\n        return sum;\r\n    }\r\n\r\n    /**\r\n     * Returns the current percentage of this wave. At 100%,\r\n     * all enemies have been sent.\r\n     */\r\n    getWavePercentage() {\r\n        return this.enemiesSent.length / this.enemiesToSend.length;\r\n    }\r\n}"]}