{"version":3,"sources":["../../js/WaveManager.js"],"names":[],"mappings":";;;;;;IAAM,WAAW;AAEF,aAFT,WAAW,CAED,IAAI,EAAE;8BAFhB,WAAW;;AAGT,YAAI,CAAC,IAAI,GAAG,IAAI,CAAC;;;AAGjB,YAAI,CAAC,WAAW,GAAG,EAAE,CAAC;;;AAGtB,YAAI,CAAC,aAAa,GAAG,EAAE,CAAC;KAC3B;;;;;;iBAVC,WAAW;;eAeL,oBAAG;;;AAGP,gBAAI,EAAE,GAAG,EAAE,CAAC;AACZ,iBAAK,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,EAAE,EAAE,CAAC,EAAE,EAAE;AACrB,oBAAI,KAAK,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACjC,oBAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAClC;SAEJ;;;WAxBC,WAAW","file":"WaveManager.js","sourcesContent":["class WaveManager {\r\n\r\n    constructor(game) {\r\n        this.game = game;\r\n\r\n        // Enemies sent on the battlefield but not dead yet for the current wave\r\n        this.enemiesSent = [];\r\n\r\n        // Enemies that should be sent for the current wave\r\n        this.enemiesToSend = [];\r\n    }\r\n\r\n    /**\r\n     * Send the next wave\r\n     */\r\n    sendWave() {\r\n\r\n        // Create X enemies\r\n        let nb = 10;\r\n        for (let e=0; e<nb; e++) {\r\n            let enemy = new Enemy(this.game);\r\n            this.enemiesToSend.push(enemy);\r\n        }\r\n\r\n    }\r\n}"]}