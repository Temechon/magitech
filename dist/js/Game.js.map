{"version":3,"sources":["../../js/Game.js"],"names":[],"mappings":"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","file":"Game.js","sourcesContent":["// The function onload is loaded when the DOM has been loaded\r\nwindow.addEventListener(\"DOMContentLoaded\", function() {\r\n    new Game('gamecanvas');\r\n});\r\n\r\n\r\nclass Game {\r\n    constructor(canvasId) {\r\n\r\n        let canvas          = document.getElementById(canvasId);\r\n        this.engine         = new BABYLON.Engine(canvas, true);\r\n\r\n        // Contains all loaded assets needed for this state\r\n        this.assets  = [];\r\n\r\n        // The state scene\r\n        this.scene   = null;\r\n\r\n        this.gui = new Gui(this);\r\n        this.mouse = new MouseHandler(this);\r\n        // Contains the x lines of the game\r\n        this.lines = [];\r\n\r\n        // Resize window event\r\n        window.addEventListener(\"resize\", () => {\r\n            this.engine.resize();\r\n        });\r\n        this.run();\r\n\r\n    }\r\n    _initScene() {\r\n\r\n        let scene = new BABYLON.Scene(this.engine);\r\n        // Camera attached to the canvas\r\n        let camera= new BABYLON.FreeCamera(\"cam\", new BABYLON.Vector3(0, 3, -10), scene);\r\n        camera.setTarget(new BABYLON.Vector3(0,0,0));\r\n        camera.attachControl(this.engine.getRenderingCanvas());\r\n\r\n        // Hemispheric light to light the scene\r\n        let h = new BABYLON.HemisphericLight(\"hemi\", new BABYLON.Vector3(0,1,0), scene);\r\n        h.intensity = 0.9;\r\n        return scene;\r\n    }\r\n\r\n    run() {\r\n\r\n        this.scene = this._initScene();\r\n\r\n        // The loader\r\n        let loader =  new BABYLON.AssetsManager(this.scene);\r\n\r\n        //    var meshTask = this.loader.addMeshTask(\"skull task\", \"\", \"./assets/\", \"block02.babylon\");\r\n        //    meshTask.onSuccess = this._initMesh;\r\n\r\n        loader.onFinish = () => {\r\n\r\n            // Init the game\r\n            this._initGame();\r\n\r\n            // The state is ready to be played\r\n            this.isReady = true;\r\n\r\n            this.engine.runRenderLoop(() => {\r\n                this.scene.render();\r\n            });\r\n        };\r\n\r\n        loader.load();\r\n    }\r\n\r\n    _initGame() {\r\n\r\n        // Create ground\r\n        let plane = BABYLON.Mesh.CreateGround(\"ground\", 25, 25, 1, this.scene);\r\n        plane.material = new BABYLON.StandardMaterial(\"\", this.scene);\r\n        plane.material.specularColor = BABYLON.Color3.Black();\r\n        plane.material.diffuseTexture = new BABYLON.Texture(\"assets/ground.jpg\", this.scene);\r\n        plane.material.diffuseTexture.uScale = plane.material.diffuseTexture.vScale = 10;\r\n        plane.material.zOffset = 1;\r\n\r\n\r\n        let pos = BABYLON.Vector3.Zero();\r\n        for (let l=0; l<5; l++) {\r\n            this.lines.push(new Line(this, 10, pos));\r\n            pos.z += 1;\r\n        }\r\n\r\n\r\n        //this.scene.debugLayer.show();\r\n    }\r\n\r\n    createTower() {\r\n        // Create tower\r\n        let tower = new Tower(this);\r\n        // Make tower follow mouse cursor\r\n        this.mouse.followMouse = tower;\r\n    }\r\n\r\n    // Returns the nearest cell position from the given world position\r\n    getNearestCell(worldPosition) {\r\n        let min = this.lines[0].cells[0]; // minimum is the first cell by default\r\n        let mindist = BABYLON.Vector3.DistanceSquared(min.position, worldPosition);\r\n\r\n\r\n        for (let l of this.lines) {\r\n            for (let c of l.cells) {\r\n                let currentMinDist = BABYLON.Vector3.DistanceSquared(c.position, worldPosition);\r\n                console.log(currentMinDist);\r\n                if ( currentMinDist <= mindist) {\r\n                    mindist = currentMinDist;\r\n                    min = c;\r\n                }\r\n            }\r\n        }\r\n        return min;\r\n    }\r\n\r\n\r\n}\r\n"]}