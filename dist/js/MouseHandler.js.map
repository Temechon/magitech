{"version":3,"sources":["../../js/MouseHandler.js"],"names":[],"mappings":"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","file":"MouseHandler.js","sourcesContent":["class MouseHandler {\r\n\r\n\r\n    constructor(game) {\r\n\r\n        this.game = game;\r\n\r\n        // This object will follow the mouse.\r\n        this.followMouse = null;\r\n\r\n        // True if the player is placing a tower\r\n        this.isPlacingTower = false;\r\n\r\n        // Debug mode activated\r\n        this.debugMode = false;\r\n        this.debugDiv = [];\r\n\r\n        // Activate debug mode\r\n        $(window).on('keydown', (evt) => {\r\n            if (evt.keyCode == 222) {\r\n                this.debugMode = !this.debugMode;\r\n                if (!this.debugMode) {\r\n                    for (let d of this.debugDiv) {\r\n                        d.remove();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        // Mouse move handler if the player selected a tower\r\n        $(window).on('mousemove', (evt) => {\r\n            if (this.followMouse) {\r\n                this.isPlacingTower = true;\r\n\r\n                // get nearest cell\r\n                let c = this.getNearestCell(evt);\r\n                if (c) {\r\n                    this.followMouse.position.copyFrom(c.position);\r\n                }\r\n            }\r\n        });\r\n\r\n        // Debug click event\r\n        $(window).on('click', (evt) => {\r\n            if (this.debugMode) {\r\n                let obj = this.getObject(evt);\r\n                if (obj && obj.debug) {\r\n                    let d = $(\"<div>\")\r\n                        .addClass('debug')\r\n                        .css(\"top\", evt.clientY)\r\n                        .css(\"left\", evt.clientX)\r\n                        .text(obj.debug());\r\n\r\n                    this.debugDiv.push(d);\r\n                    $(\"body\").append(d);\r\n                }\r\n            }\r\n        });\r\n\r\n        // Mouse click handler when the tower should be placed\r\n        $(window).on('click', (evt) => {\r\n            if (this.isPlacingTower && this.followMouse) {\r\n\r\n                let c = this.getNearestCell(evt);\r\n                if (c) {\r\n                    // Affect cell to tower\r\n                    this.followMouse.cell = c;\r\n                }\r\n\r\n                // Remove tower from mousemove\r\n                this.followMouse = null;\r\n                this.isPlacingTower = false;\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    // Project the given screen coordinate into 3D world\r\n    getWorldPosition(evt) {\r\n        // Update pointer coordinate\r\n        this.game.scene._updatePointerPosition(evt);\r\n\r\n        let scene = this.game.scene;\r\n        var pr = scene.pick(scene._pointerX, scene._pointerY, (mesh) => { return mesh.name == \"ground\"; }, false);\r\n        if (pr.hit) {\r\n            return pr.pickedPoint.clone();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Returns the object clicked\r\n     * @param evt The mouse event\r\n     * @returns {Mesh} The selected mesh, null otherwise\r\n     */\r\n    getObject(evt) {\r\n        // Update pointer coordinate\r\n        this.game.scene._updatePointerPosition(evt);\r\n\r\n        let scene = this.game.scene;\r\n        var pr = scene.pick(scene._pointerX, scene._pointerY, null, false);\r\n        if (pr.hit) {\r\n            return pr.pickedMesh;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Returns the nearest cell from the current mouse position\r\n     * @param evt The mouse event\r\n     * @returns null if there is no world position (scene.pick returns null), the nearest Cell otherwise\r\n     */\r\n    getNearestCell(evt) {\r\n        // Pick ground position according to the mouse cursor\r\n        let worldPos = this.getWorldPosition(evt);\r\n        if (worldPos) {\r\n            return this.game.getNearestCell(worldPos);\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n\r\n}"]}