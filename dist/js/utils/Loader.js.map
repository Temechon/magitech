{"version":3,"sources":["../../../js/utils/Loader.js"],"names":[],"mappings":";;;;;;;;;;;;IAMM,MAAM;AAEI,aAFV,MAAM,CAEK,IAAI,EAAE;8BAFjB,MAAM;;AAGJ,YAAI,CAAC,IAAI,GAAG,IAAI,CAAC;;;AAGjB,YAAI,CAAC,OAAO,GAAG,IAAI,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;;AAE1D,YAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;AAC3B,YAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;KAC5B;;;;;;iBAVC,MAAM;;eAeA,kBAAC,IAAI,EAAE;;;;AAEX,gBAAI,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,EAAE,EAAE,uBAAqB,IAAI,QAAQ,IAAI,cAAW,CAAC;AACjG,oBAAQ,CAAC,SAAS,GAAG,UAAC,OAAO,EAAK;;;AAG9B,uBAAO,CAAC,YAAY,CAAC,OAAO,CAAC,UAAC,IAAI,EAAK;AACnC,wBAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;iBAC1B,CAAC,CAAC;AACH,sBAAK,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,YAAY,CAAC;aACjD,CAAC;SACL;;;;;eAGG,gBAAG;AACH,gBAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;SACvB;;;aAEW,aAAC,IAAI,EAAE;AACf,gBAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC;SAChC;;;WAnCC,MAAM","file":"Loader.js","sourcesContent":["/**\r\n * Load all assets needed for the game.\r\n * Maybe in the future will display a custom loading screen with some funny messages. Why not.\r\n *\r\n * For each task, this loader add\r\n */\r\nclass Loader {\r\n\r\n    constructor (game) {\r\n        this.game = game;\r\n\r\n        // Assets manager\r\n        this._loader = new BABYLON.AssetsManager(this.game.scene);\r\n\r\n        this._addMesh('generator');\r\n        this._addMesh('shooter');\r\n    }\r\n\r\n    /**\r\n     * Add a mesh task to the loader. Should be finished by adding animations\r\n     */\r\n    _addMesh(name) {\r\n        // Add the mesh task given by its name to the loader\r\n        let meshTask = this._loader.addMeshTask(name, '', `./assets/models/${name}/`, `${name}.babylon`);\r\n        meshTask.onSuccess = (objects) => {\r\n\r\n            // All meshes are disabled at start\r\n            objects.loadedMeshes.forEach((mesh) => {\r\n                mesh.setEnabled(false);\r\n            });\r\n            this.game.assets[name] = objects.loadedMeshes;\r\n        };\r\n    }\r\n\r\n    // Start the loader\r\n    load() {\r\n        this._loader.load();\r\n    }\r\n\r\n    set onFinish(func) {\r\n        this._loader.onFinish = func;\r\n    }\r\n}"]}