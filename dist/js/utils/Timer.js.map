{"version":3,"sources":["../../../js/utils/Timer.js"],"names":[],"mappings":"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","file":"Timer.js","sourcesContent":["/**\r\n* Builds a new timer. A timer can delay an action, and repeat this action X times\r\n* @param time The time in milliseconds\r\n* @param scene The scene\r\n* @param callback The callback function called when the timer is finished\r\n* @param options.autostart If set to true, the timer will autostart. False by default.\r\n *@param options.autodestroy If set to true, the timer will autodestroy at the end of all callback functions. False by default\r\n *@param options.repeat If set, the callback action will be repeated the specified number of times. 1 by default. Set to -1 if repeat infinitely\r\n*/\r\nclass Timer {\r\n\r\n    constructor(time, scene, options={}) {\r\n\r\n        this._scene = scene;\r\n\r\n        this.maxTime = this.currentTime = time;\r\n\r\n        // True if the timer is finished, false otherwise\r\n        this.isOver = false;\r\n\r\n        // True if the timer is paused, false otherwise\r\n        this.paused = false;\r\n\r\n        // True if the timer has been started, false otherwise\r\n        this.started = false;\r\n\r\n        // Function to be repeated when the timer is finished\r\n        this.callback = null;\r\n\r\n        // Function to be called when the timer is finished (no more repeat counts)\r\n        this.onFinish = null;\r\n\r\n        //If set, the callback action will be repeated the specified number of times\r\n        this.repeat = options.repeat || 1;\r\n\r\n        this.autostart = options.autostart || false;\r\n\r\n        this.autodestroy = options.autodestroy || false;\r\n\r\n        this._registeredFunction = () => {\r\n            if (this.started && !this.isOver && !this.paused) {\r\n                this._update();\r\n            }\r\n        };\r\n        scene.registerBeforeRender(this._registeredFunction);\r\n\r\n        // Start the timer is set to autostart\r\n        if (this.autostart) {\r\n            this.start();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reset the timer\r\n     */\r\n    reset() {\r\n        this.currentTime = this.maxTime;\r\n        this.isOver = false;\r\n        this.started = false;\r\n        this.paused = false;\r\n    }\r\n\r\n    /**\r\n     * Start the timer\r\n     */\r\n    start() {\r\n        this.started = true;\r\n    }\r\n\r\n    /**\r\n     * Pause the timer\r\n     */\r\n    pause() {\r\n        this.paused = true;\r\n    }\r\n\r\n    /**\r\n     * Stop the timer, and reset it.\r\n     * @param destroy If set to true, the timer is deleted.\r\n     */\r\n    stop(destroy) {\r\n        this.started = false;\r\n        this.reset();\r\n        if (destroy) {\r\n            this._destroy();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Destory the timer\r\n     * @private\r\n     */\r\n    _destroy() {\r\n        // Unregister update function\r\n        this._scene.unregisterBeforeRender(this._registeredFunction);\r\n    }\r\n\r\n    /**\r\n     * Unpause the timer\r\n     */\r\n    resume() {\r\n        this.paused = false;\r\n    }\r\n\r\n    /**\r\n     * The update function\r\n     * @private\r\n     */\r\n    _update() {\r\n\r\n        this.currentTime -= this._scene.getEngine().getDeltaTime();\r\n\r\n        if (this.currentTime <= 0) {\r\n            // The delay is finished, run the callback\r\n            this.isOver = true;\r\n            if (this.repeat != -1) {\r\n                this.repeat--;\r\n            }\r\n            if (this.callback) {\r\n                this.callback();\r\n            }\r\n\r\n            if (this.repeat > 0 || this.repeat == -1) {\r\n                this.reset();\r\n                this.start();\r\n            } else {\r\n                // Call the onFinish action\r\n                if (this.onFinish) {\r\n                    this.onFinish();\r\n                }\r\n                // Autodestroy\r\n                if (this.autodestroy) {\r\n                    this._destroy();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"]}